{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "보안 강화 및 Next.js 업그레이드",
        "description": "Next.js를 최신 버전으로 업데이트하여 발견된 CVE 취약점 4개를 해결하고, 추가적인 보안 조치(CSP, 보안 헤더)를 적용하여 플랫폼의 보안을 강화합니다.",
        "details": "1. `npm update next@latest` 및 `npm audit fix --force`를 실행하여 의존성 취약점을 해결합니다.\n2. `next.config.js`에 Content Security Policy (CSP)를 설정하여 XSS 공격을 방지합니다.\n3. HSTS, X-Frame-Options, Referrer-Policy 등 보안 헤더를 추가합니다.\n4. GitHub 리포지토리에 Dependabot을 설정하여 의존성을 자동으로 모니터링합니다.",
        "testStrategy": "`npm audit` 실행 결과 취약점이 0개인지 확인합니다. SecurityHeaders.com과 같은 외부 도구를 사용하여 보안 헤더 점수가 A등급인지 검증합니다. Dependabot이 의존성 업데이트 PR을 생성하는지 확인합니다.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "번들 크기 최적화",
        "description": "@next/bundle-analyzer를 사용하여 번들을 분석하고, Tree Shaking 및 코드 분할을 통해 번들 크기를 목표치인 400MB 미만으로 줄입니다.",
        "details": "1. `@next/bundle-analyzer`를 설치하고 `next.config.js`에 설정합니다.\n2. `experimental.optimizePackageImports` 옵션을 사용하여 주요 라이브러리(lucide-react, prismjs 등)의 Tree Shaking을 활성화합니다.\n3. Webpack의 `optimization.splitChunks` 설정을 조정하여 번들 분할을 개선합니다.\n4. 전체 라이브러리를 import하는 코드를 필요한 모듈만 import하도록 수정합니다.",
        "testStrategy": "`ANALYZE=true npm run build` 명령을 실행하여 생성된 번들 분석 리포트를 확인합니다. 최종 번들 크기가 400MB 미만인지 검증합니다.",
        "priority": "high",
        "dependencies": [1],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "이미지 및 폰트 최적화",
        "description": "이미지 최적화 파이프라인을 구축하여 WebP/AVIF 형식으로 자동 변환하고, 폰트를 로컬 호스팅 및 서브셋으로 변경하여 에셋 로딩 성능을 개선합니다.",
        "details": "1. `sharp` 라이브러리를 사용하여 기존 이미지를 WebP 및 AVIF 형식으로 변환하는 스크립트를 작성합니다.\n2. `<picture>` 태그를 사용하는 `OptimizedImage` 컴포넌트를 구현하여 브라우저가 최신 이미지 포맷을 우선적으로 로드하도록 합니다.\n3. 웹 폰트를 CDN 대신 로컬 `public/fonts` 디렉토리에 호스팅합니다.\n4. `@font-face` 규칙에 `unicode-range`를 사용하여 필요한 문자만 포함하는 폰트 서브셋을 로드하도록 설정합니다.",
        "testStrategy": "Lighthouse 리포트에서 'Serve images in next-gen formats' 항목이 통과되는지 확인합니다. 브라우저 개발자 도구의 네트워크 탭에서 폰트 파일이 로컬에서 로드되고 크기가 줄었는지 확인합니다. Core Web Vitals 중 LCP가 2.5초 미만인지 측정합니다.",
        "priority": "high",
        "dependencies": [1],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "CI/CD 파이프라인 구축",
        "description": "GitHub Actions를 사용하여 린팅, 타입 체크, 테스트, 빌드, 배포 과정을 자동화하는 CI/CD 파이프라인을 구축하여 개발 생산성과 배포 안정성을 높입니다.",
        "details": "1. `.github/workflows/ci.yml` 워크플로우 파일을 생성합니다.\n2. `push` 및 `pull_request` 이벤트에 트리거되도록 설정합니다.\n3. `test` 잡에 `npm ci`, `npm run lint`, `npm run type-check`, `npm run test:unit`, `npm audit` 단계를 포함합니다.\n4. `deploy` 잡을 생성하여 `test` 잡 성공 후 main 브랜치에 한해 Netlify로 자동 배포되도록 구성합니다.",
        "testStrategy": "새로운 Pull Request를 생성했을 때 GitHub Actions 워크플로우가 자동으로 실행되고 모든 검사를 통과하는지 확인합니다. main 브랜치에 머지했을 때 Netlify에 성공적으로 배포되는지 확인합니다.",
        "priority": "medium",
        "dependencies": [1],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "테스트 환경 구축 및 코드 품질 강화",
        "description": "Jest와 Testing Library로 단위 테스트 환경을 구축하고, TypeScript strict 모드를 100% 적용하며, ESLint 규칙을 확장하여 코드 품질과 안정성을 향상시킵니다.",
        "details": "1. Jest, @testing-library/react, jest-environment-jsdom 등 테스트 관련 라이브러리를 설치하고 설정 파일을 구성합니다.\n2. `tsconfig.json`의 `compilerOptions`에 `strict: true` 및 `noUncheckedIndexedAccess` 등 추가적인 strict 옵션을 활성화합니다.\n3. 기존 코드의 타입 오류를 모두 수정합니다.\n4. ESLint 설정에 `@typescript-eslint/no-explicit-any`와 같은 규칙을 추가하여 코드 품질을 강제합니다.",
        "testStrategy": "`npm run test:unit` 명령으로 테스트를 실행하고 모두 통과하는지 확인합니다. `jest --coverage`를 실행하여 테스트 커버리지가 70% 이상인지 확인합니다. `tsc --noEmit` 실행 시 타입 에러가 발생하지 않는지 확인합니다.",
        "priority": "medium",
        "dependencies": [4],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "테스트 라이브러리 설치 및 기본 설정",
            "description": "Jest, Testing Library 등 단위 테스트에 필요한 라이브러리를 설치하고, `jest.config.js`와 `jest.setup.js` 같은 기본 설정 파일을 구성하여 테스트 실행 환경을 구축합니다.",
            "dependencies": [],
            "details": "1. `npm install --save-dev jest @testing-library/react @testing-library/jest-dom jest-environment-jsdom @types/jest` 명령으로 관련 라이브러리를 설치합니다.\n2. `jest.config.js` 파일을 생성하고 `testEnvironment`, `setupFilesAfterEnv` 등 기본 옵션을 설정합니다.\n3. `jest.setup.js` 파일을 생성하여 `@testing-library/jest-dom`을 확장하도록 설정합니다.",
            "status": "done",
            "testStrategy": "`npx jest` 명령어가 오류 없이 실행되고, `expect(true).toBe(true)`와 같은 간단한 초기 테스트가 통과하는지 확인합니다."
          },
          {
            "id": 2,
            "title": "TypeScript Strict 모드 활성화",
            "description": "`tsconfig.json` 파일에서 `strict` 모드를 활성화하고, `noUncheckedIndexedAccess`와 같은 추가적인 타입 검사 옵션을 적용하여 코드의 안정성을 높입니다.",
            "dependencies": [],
            "details": "`tsconfig.json`의 `compilerOptions` 객체에 `\"strict\": true`와 `\"noUncheckedIndexedAccess\": true`를 추가하여 타입 검사 규칙을 강화합니다.",
            "status": "done",
            "testStrategy": "`tsc --noEmit` 실행 시 프로젝트 전반에 걸쳐 새로운 타입 에러가 발생하는 것을 확인하여 설정이 올바르게 적용되었는지 검증합니다."
          },
          {
            "id": 3,
            "title": "Strict 모드 적용에 따른 타입 오류 수정",
            "description": "TypeScript Strict 모드 활성화로 인해 발생하는 모든 타입 오류를 코드베이스 전체에서 수정하여 타입 안정성을 100% 확보합니다.",
            "dependencies": [],
            "details": "`any`, `null`, `undefined` 관련 오류를 중심으로, 모든 컴포넌트의 props, state 및 유틸리티 함수의 인자와 반환 값에 명확한 타입을 정의하여 오류를 해결합니다.",
            "status": "done",
            "testStrategy": "`tsc --noEmit` 명령을 실행했을 때 어떠한 타입 에러도 출력되지 않는 것을 확인합니다."
          },
          {
            "id": 4,
            "title": "ESLint 규칙 강화 및 코드 위반 수정",
            "description": "`@typescript-eslint/no-explicit-any`와 같은 엄격한 ESLint 규칙을 추가하여 잠재적인 오류를 방지하고, 기존 코드에 해당 규칙을 적용하여 모두 수정합니다.",
            "dependencies": [],
            "details": "1. `.eslintrc.js` 파일의 `rules`에 `'@typescript-eslint/no-explicit-any': 'error'`와 같은 규칙을 추가합니다.\n2. `npm run lint -- --fix`를 실행하여 자동 수정 가능한 부분을 처리한 후, 나머지 위반 사항을 수동으로 수정합니다.\n<info added on 2025-08-30T09:53:33.253Z>\n3. `.eslintrc.json`에 다음과 같이 엄격한 TypeScript ESLint 규칙을 추가 및 변경함:\n    - `@typescript-eslint/no-explicit-any`: `warn` -> `error`로 상향\n    - `@typescript-eslint/no-unused-vars`: `warn` -> `error`로 상향\n    - `@typescript-eslint/prefer-nullish-coalescing`, `prefer-optional-chain`, `no-non-null-assertion`, `consistent-type-imports` 규칙 추가\n4. 규칙 적용 후, 예상보다 많은 수의 린트 오류가 발견됨. 주요 위반 사항은 다음과 같음:\n    - 사용되지 않는 변수 (제거 또는 `_` 접두사 처리 필요)\n    - 명시적인 `any` 타입 (구체적인 타입으로 수정 필요)\n    - `console` 구문\n    - Nullish Coalescing(`??`) 및 Optional Chaining(`?.`)으로 대체가 필요한 Non-null 단언(`!`) 및 논리 연산자(`||`)\n5. 코드베이스 전반에 상당한 수정이 필요하여, 치명적인 오류를 먼저 수정하거나 일부 규칙을 일시적으로 완화하는 실용적인 접근 방식에 대한 결정이 필요함.\n</info added on 2025-08-30T09:53:33.253Z>",
            "status": "done",
            "testStrategy": "`npm run lint` 명령을 실행했을 때 어떠한 린트 에러나 경고도 출력되지 않는 것을 확인합니다."
          },
          {
            "id": 5,
            "title": "핵심 컴포넌트 단위 테스트 작성 및 커버리지 70% 목표 설정",
            "description": "주요 컴포넌트에 대한 단위 테스트를 작성하여 테스트 환경의 동작을 검증하고, 전체 테스트 커버리지 70% 달성을 위한 기반을 마련합니다.",
            "dependencies": [],
            "details": "1. `@testing-library/react`를 사용하여 최소 3개 이상의 핵심 컴포넌트(예: Button, Input, Header)에 대한 렌더링 및 상호작용 테스트 케이스를 작성합니다.\n2. `package.json`의 `scripts`에 `\"test:unit\": \"jest\"`와 `\"test:coverage\": \"jest --coverage\"`를 추가합니다.",
            "status": "done",
            "testStrategy": "`npm run test:unit` 명령으로 추가된 테스트가 모두 통과하는지 확인하고, `npm run test:coverage`를 실행하여 테스트 커버리지가 70% 이상인지 확인합니다."
          }
        ]
      },
      {
        "id": 6,
        "title": "성능 모니터링 및 접근성 개선",
        "description": "`web-vitals`를 사용하여 Core Web Vitals를 수집하고, Lighthouse 접근성 점수 100점을 목표로 색상 대비, 키보드 네비게이션, 스크린 리더 지원을 개선합니다.",
        "details": "1. `web-vitals` 라이브러리를 사용하여 LCP, FID, CLS 등의 지표를 수집하고 분석 도구(예: Google Analytics)로 전송하는 로직을 구현합니다.\n2. WCAG AA 기준을 충족하도록 텍스트와 배경의 색상 대비를 조정합니다.\n3. 모든 인터랙티브 요소에 명확한 포커스 스타일을 적용하고 키보드만으로 사이트 전체를 탐색할 수 있도록 개선합니다.\n4. `aria-label`, `sr-only` 클래스 등을 적절히 사용하여 스크린 리더 사용자 경험을 최적화합니다.",
        "testStrategy": "Lighthouse 리포트에서 접근성 점수가 100점, 성능 점수가 90점 이상인지 확인합니다. 키보드의 Tab 키만으로 모든 링크와 버튼에 순차적으로 접근하고 활성화할 수 있는지 수동으로 테스트합니다.",
        "priority": "medium",
        "dependencies": [2, 3],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "모바일 사용자 경험 최적화",
        "description": "모바일 환경에서의 사용성 개선을 위해 터치 인터페이스를 최적화하고, 반응형 디자인을 개선하며, 모바일 전용 성능 최적화를 적용합니다.",
        "details": "1. 버튼, 링크 등 모든 터치 타겟의 크기를 최소 44x44px로 설정하여 터치 오류를 줄입니다.\n2. 모바일 화면에 적합한 폰트 크기와 줄 간격을 적용하고, 모바일 전용 하단 네비게이션 바를 구현합니다.\n3. `useDeviceType`과 같은 커스텀 훅을 구현하여 모바일 환경에서는 Table of Contents와 같이 무거운 컴포넌트를 렌더링하지 않도록 조건부 로직을 추가합니다.",
        "testStrategy": "브라우저 개발자 도구의 모바일 시뮬레이터와 실제 모바일 기기에서 레이아웃이 깨지지 않고 모든 기능이 정상 동작하는지 확인합니다. Lighthouse의 모바일 사용성 점수가 95점 이상인지 확인합니다.",
        "priority": "medium",
        "dependencies": [6],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "터치 타겟 크기 전역 조정",
            "description": "프로젝트 전반에 걸쳐 버튼, 링크 등 모든 인터랙티브 요소의 터치 영역을 최소 44x44px로 확대하여 모바일 터치 오류를 줄입니다.",
            "dependencies": [],
            "details": "CSS 전역 스타일 및 개별 컴포넌트 스타일을 수정하여 `min-width`, `min-height`, `padding` 속성을 조정합니다. 특히 헤더, 푸터, 카드 내 작은 아이콘/링크의 터치 영역을 중점적으로 확인합니다.\n<info added on 2025-08-31T00:58:39.587Z>\n[작업 완료]\n- 프로젝트 전반의 터치 타겟 크기를 검증하고, 최소 44x44px 기준에 미달하는 부분을 개선함.\n- 주요 수정 사항:\n  - Bio 컴포넌트 내 소셜 링크 버튼: `min-h-[44px]`, `min-w-[44px]` 적용\n  - SearchInteractive 컴포넌트의 클리어 버튼: `min-h-[44px]`, `min-w-[44px]` 적용\n  - ShareModal 컴포넌트의 복사 버튼: `min-h-[44px]` 적용\n- 결과: 모든 인터랙티브 요소의 터치 타겟이 44x44px 이상을 보장하게 되어 모바일 사용성과 WCAG 접근성 가이드라인 준수 수준이 향상됨. 빌드 및 타입 체크 통과 확인.\n</info added on 2025-08-31T00:58:39.587Z>",
            "status": "done",
            "testStrategy": "브라우저 개발자 도구의 요소 검사 기능을 사용하여 주요 터치 타겟의 크기가 44x44px 이상인지 확인하고, 실제 모바일 기기에서 터치 편의성을 검증합니다."
          },
          {
            "id": 2,
            "title": "모바일 가독성 개선을 위한 타이포그래피 조정",
            "description": "모바일 화면에서의 가독성을 높이기 위해 미디어 쿼리를 사용하여 뷰포트 너비에 따라 폰트 크기와 줄 간격을 동적으로 조정합니다.",
            "dependencies": [],
            "details": "CSS 미디어 쿼리(`@media (max-width: 768px)`)를 사용하여 본문 텍스트는 최소 16px, 줄 간격은 1.5 이상으로 설정합니다. 제목(h1-h6) 태그의 크기도 모바일 환경에 맞게 축소 조정합니다.\n<info added on 2025-08-31T01:56:41.400Z>\n모바일 타이포그래피 개선 작업 완료:\n\n주요 수정 사항:\n1. 모든 모바일 뷰포트에서 본문 텍스트 크기를 최소 16px로 보장\n   - 640px 이하: 15px → 16px로 변경\n   - 480px 이하: 14px → 16px로 변경\n   - pretendard-mobile-size: 15px → 16px로 변경\n2. 줄 간격은 이미 1.5 이상 (1.65, 1.75, 1.8)으로 적절히 설정되어 있음\n3. 기존의 포괄적인 모바일 타이포그래피 시스템을 활용하여 개선\n\n결과:\n- WCAG 접근성 가이드라인 준수 (최소 16px 텍스트)\n- 모바일 가독성 향상\n- 빌드 및 타입 체크 성공적으로 통과\n\n현재 상황: 개발 서버를 시작하여 실제 모바일 환경에서 타이포그래피 적용 상태 확인 예정\n</info added on 2025-08-31T01:56:41.400Z>",
            "status": "done",
            "testStrategy": "다양한 모바일 기기 해상도(시뮬레이터 및 실제 기기)에서 텍스트가 잘리거나 너무 작게 보이지 않는지 확인합니다."
          },
          {
            "id": 3,
            "title": "모바일 전용 하단 네비게이션 바 구현",
            "description": "모바일 사용자의 핵심 기능 접근성을 높이기 위해 화면 하단에 고정되는 네비게이션 바 컴포넌트를 새롭게 구현합니다.",
            "dependencies": ["7.2"],
            "details": "주요 메뉴(예: 홈, 검색, 포스트 목록)로 구성된 `BottomNavBar` 리액트 컴포넌트를 생성합니다. `position: fixed; bottom: 0;` CSS 속성을 사용하여 화면 하단에 고정시키고, 모바일 뷰포트에서만 보이도록 미디어 쿼리를 적용합니다.",
            "status": "pending",
            "testStrategy": "모바일 뷰에서 하단 네비게이션 바가 올바르게 표시되고 동작하는지 확인합니다. 데스크탑 뷰에서는 해당 바가 보이지 않는지 확인합니다."
          },
          {
            "id": 4,
            "title": "useDeviceType 훅 구현 및 조건부 렌더링 적용",
            "description": "디바이스 유형(모바일/데스크탑)을 감지하는 커스텀 훅을 만들고, 이를 사용하여 모바일에서 불필요한 무거운 컴포넌트(예: Table of Contents)의 렌더링을 막아 성능을 개선합니다.",
            "dependencies": [],
            "details": "`window.innerWidth`를 기반으로 디바이스 유형을 판별하는 `useDeviceType` 커스텀 훅을 구현합니다. 포스트 상세 페이지 등에서 이 훅을 사용하여 모바일일 경우 Table of Contents 컴포넌트가 렌더링되지 않도록 조건부 로직을 추가합니다.",
            "status": "pending",
            "testStrategy": "모바일 뷰에서 Table of Contents가 보이지 않는지, 데스크탑 뷰에서는 정상적으로 보이는지 확인합니다. React DevTools를 사용하여 모바일 뷰에서 해당 컴포넌트가 렌더링 트리에서 제외되었는지 검증합니다."
          },
          {
            "id": 5,
            "title": "최종 모바일 사용성 감사 및 Lighthouse 점수 검증",
            "description": "구현된 최적화 사항들을 종합적으로 검증하고, Lighthouse 리포트를 기반으로 추가적인 모바일 사용성 문제를 식별 및 수정하여 목표 점수인 95점 이상을 달성합니다.",
            "dependencies": ["7.1", "7.2", "7.3", "7.4"],
            "details": "Chrome 개발자 도구의 Lighthouse 탭에서 모바일 환경으로 리포트를 생성합니다. 'Tap targets are not sized appropriately', 'Content is not sized correctly for the viewport' 등 사용성 관련 항목에서 발견된 문제점들을 해결합니다.",
            "status": "pending",
            "testStrategy": "Lighthouse 리포트의 모바일 'Accessibility' 및 'Best Practices' 항목에서 사용성 관련 점수가 95점 이상인지 최종 확인합니다."
          }
        ]
      },
      {
        "id": 8,
        "title": "SEO 및 콘텐츠 전달 강화",
        "description": "Google 리치 결과 표시를 위해 JSON-LD 구조화된 데이터를 추가하고, 동적 사이트맵 및 RSS 피드를 개선하여 검색 엔진 크롤링 효율성을 높입니다.",
        "details": "1. `BlogPosting` 스키마를 사용하는 JSON-LD 형식의 구조화된 데이터를 포스트 페이지에 동적으로 삽입하는 컴포넌트를 구현합니다.\n2. Next.js App Router의 `sitemap.ts` 기능을 사용하여 모든 정적/동적 페이지를 포함하는 사이트맵을 자동으로 생성합니다.\n3. `rss` 라이브러리를 사용하여 최신 포스트 목록을 포함하는 RSS 피드를 `/rss/route.ts` 경로에 생성합니다.",
        "testStrategy": "Google의 '리치 결과 테스트' 도구를 사용하여 포스트 페이지의 URL을 검증합니다. `/sitemap.xml`과 `/rss` 경로에 접속하여 XML 콘텐츠가 올바르게 생성되는지 확인합니다.",
        "priority": "low",
        "dependencies": [1],
        "status": "To Do",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-30T09:09:21.091Z",
      "updated": "2025-08-31T01:58:21.634Z",
      "description": "Tasks for master context"
    }
  }
}
